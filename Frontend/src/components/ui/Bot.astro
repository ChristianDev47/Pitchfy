<!-- component -->
<div class="px-5 floating-chat" id="floating-chat">
  <i class="icon" >
    <svg xmlns=" http://www.w3.org/2000/svg" width="30" height="40" viewBox="0 0 24 24" fill="none"
    stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
    class="block text-white align-middle border-gray-200">
    <path d="m3 21 1.9-5.7a8.5 8.5 0 1 1 3.8 3.8z" class="border-gray-200">
    </path>
  </svg>
  </i>
  <div class="chat">
      <div class="header flex justify-end text-[12px]">
 
          <button>
              x
          </button>
                       
      </div>
      <ul class="messages">
          <li class="self">Welcome to Pitchfy. I’m Clark, your dedicated virtual journalist. My goal is to craft a professional and impactful article that represents your vision with precision. When you've finished, click on the ‘send article by email’ button to automatically send it to our list of journalists. Before we begin, may I have your name to personalize our session?</li>
      </ul>
      <div class="footer">
          <div class="outline-none text-box" contenteditable="true"></div>
          <button id="sendMessage" class="text-[12px]" >send</button>
      </div>
  </div>
</div>


<style>
  .floating-chat {
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    position: fixed;
    bottom: 10px;
    right: 50px;
    width: 40px;
    height: 40px;
    transition: all 250ms ease-out;
    border-radius: 50%;
    background: #232323;
    background-repeat: no-repeat;
    background-attachment: fixed;
    z-index: 100;
  }
  .floating-chat.enter:hover {
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23);
    opacity: 1;
  }
  .floating-chat.enter {
    transform: translateY(0);
    opacity: 0.6;
    box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 2px rgba(0, 0, 0, 0.14);
  }
  .floating-chat.expand {
    width: 300px;
    max-height: 400px;
    height: 400px;
    border-radius: 5px;
    background: #e9eef3;
    cursor: auto;
    opacity: 1;
    outline: 0;
    box-shadow: 0 0 3pt 2pt rgba(216, 216, 216, 0.3);
  }
  .floating-chat button {
    background: transparent;
    border: 0;
    color: rgb(0, 0, 0);
    text-transform: uppercase;
    border-radius: 3px;
    cursor: pointer;
  }
  .floating-chat .chat {
    display: flex;
    flex-direction: column;
    position: absolute;
    opacity: 0;
    width: 1px;
    height: 1px;
    border-radius: 50%;
    transition: all 250ms ease-out;
    margin: auto;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
  .floating-chat .chat.enter {
    opacity: 1;
    border-radius: 0;
    margin: 10px;
    width: auto;
    height: auto;
  }
  .floating-chat .chat .header {
    flex-shrink: 0;
    padding-bottom: 10px;
    display: flex;
    background: transparent;
  }
  .floating-chat .chat .header .title {
    flex-grow: 1;
    flex-shrink: 1;
    padding: 0 5px;
  }
  .floating-chat .chat .header button {
    flex-shrink: 0;
    color: #232323;
  }
  .floating-chat .chat .messages {
    padding: 5px;
    margin: 0;
    list-style: none;
    overflow-y: scroll;
    overflow-x: hidden;
    flex-grow: 1;
    border-radius: 4px;
    background: transparent;
  }
  .floating-chat .chat .messages::-webkit-scrollbar {
    width: 5px;
  }
  .floating-chat .chat .messages::-webkit-scrollbar-track {
    border-radius: 2px;
    background-color: rgba(198, 198, 198, 0.1);
  }
  .floating-chat .chat .messages::-webkit-scrollbar-thumb {
    border-radius: 2px;
    background-color: rgba(190, 190, 190, 0.2);
  }
  .floating-chat .chat .messages li {
    position: relative;
    clear: both;
    display: inline-block;
    padding: 10px;
    margin: 0 0 10px 0;
    border-radius: 10px;
    font-size: 12px;
    background-color: rgba(18, 18, 18, 0.2);
    color: rgb(35, 35, 35);
    word-wrap: break-word;
    max-width: 81%;
  }
  .floating-chat .chat .messages li:before {
    position: absolute;
    top: 0;
    width: 25px;
    height: 25px;
    border-radius: 25px;
    content: '';
    background-size: cover;
    border: #232323;
    border-width: 5px;
  }
  .floating-chat .chat .messages li:after {
    position: absolute;
    top: 10px;
    content: '';
    width: 0;
    height: 0;
    border-top: 10px solid rgb(255, 255, 255);
  }
  .floating-chat .chat .messages li.other {
    animation: show-chat-even 0.15s 1 ease-in;
    -moz-animation: show-chat-even 0.15s 1 ease-in;
    -webkit-animation: show-chat-even 0.15s 1 ease-in;
    float: left;
    margin-left: 45px;
    background-color: rgb(255, 255, 255);
    color: #292929;
  }
  .floating-chat .chat .messages li.other:before {
    right: -45px;
    background-image: url(https://github.com/Thatkookooguy.png);
  }
  .floating-chat .chat .messages li.other:after {
    border-right: 10px solid transparent;
    right: -10px;
  }
  .floating-chat .chat .messages li.self {
    animation: show-chat-even 0.15s 1 ease-in;
    -moz-animation: show-chat-even 0.15s 1 ease-in;
    -webkit-animation: show-chat-even 0.15s 1 ease-in;
    float: left;
    margin-left: 45px;
    background-color: rgb(255, 255, 255);
    color: #292929;
  }
  .floating-chat .chat .messages li.self:before {
    left: -45px;
    background-image: url(https://github.com/ortichon.png);
    border: #232323;
  }
  .floating-chat .chat .messages li.self:after {
    border-left: 10px solid transparent;
    left: -10px;
  }
  .floating-chat .chat .footer {
    flex-shrink: 0;
    display: flex;
    padding-top: 10px;
    max-height: 90px;
    background: transparent;
  }
  .floating-chat .chat .footer .text-box {
    border-radius: 3px;
    background: rgb(223, 223, 223);
    min-height: 100%;
    width: 100%;
    font-size: 12px;
    margin-right: 5px;
    color: #000000;
    overflow-y: auto;
    padding: 5px 5px;
  }
  .floating-chat .chat .footer .text-box::-webkit-scrollbar {
    width: 5px;
  }
  .floating-chat .chat .footer .text-box::-webkit-scrollbar-track {
    border-radius: 5px;
    background-color: rgba(25, 147, 147, 0.1);
  }
  .floating-chat .chat .footer .text-box::-webkit-scrollbar-thumb {
    border-radius: 5px;
    background-color: rgba(25, 147, 147, 0.2);
  }
  @keyframes show-chat-even {
    0% {
      margin-left: -480px;
    }
    100% {
      margin-left: 0;
    }
  }
  @-moz-keyframes show-chat-even {
    0% {
      margin-left: -480px;
    }
    100% {
      margin-left: 0;
    }
  }
  @-webkit-keyframes show-chat-even {
    0% {
      margin-left: -480px;
    }
    100% {
      margin-left: 0;
    }
  }
  @keyframes show-chat-odd {
    0% {
      margin-right: -480px;
    }
    100% {
      margin-right: 0;
    }
  }
  @-moz-keyframes show-chat-odd {
    0% {
      margin-right: -480px;
    }
    100% {
      margin-right: 0;
    }
  }
  @-webkit-keyframes show-chat-odd {
    0% {
      margin-right: -480px;
    }
    100% {
      margin-right: 0;
    }
  }
 
</style>


<script>
class FloatingChat {
  private element: HTMLElement;
  private chatID: string;
  private handleCloseClick: () => void; 
  private handleSendMessageClick: () => void; 
  private handleKeydown: (event: KeyboardEvent) => void; 

  constructor(elementId: string) {
    this.element = document.getElementById(elementId) as HTMLElement;

    if (!this.element) {
      console.error(`Elemento con ID ${elementId} no encontrado`);
      return;
    }

    this.chatID = localStorage.getItem('chatID') || this.createUUID();
    localStorage.setItem('chatID', this.chatID);

    setTimeout(() => {
      this.element.classList.add('enter');
    }, 1000);

    this.element.addEventListener('click', () => this.openElement());
  }

  private openElement() {
    const messages = this.element.querySelector('.messages') as HTMLElement;
    const textInput = this.element.querySelector('.text-box') as HTMLInputElement;

    if (!messages || !textInput) {
      console.error('No se encontraron los elementos necesarios en el DOM');
      return;
    }

    const icon = this.element.querySelector('.floating-chat > i') as HTMLElement;
    if (icon) {
      icon.classList.add('hidden');
    }
    this.element.classList.add('expand');
    this.element.querySelector('.chat')?.classList.add('enter');

    textInput.disabled = false;
    textInput.focus();

    this.handleKeydown = (event) => this.onMetaAndEnter(event);
    textInput.addEventListener('keydown', this.handleKeydown);

    this.handleCloseClick = () => this.closeElement();
    this.element.querySelector('.header button')?.addEventListener('click', this.handleCloseClick);

    this.handleSendMessageClick = () => this.sendNewMessage();
    this.element.querySelector('#sendMessage')?.addEventListener('click', this.handleSendMessageClick);

    messages.scrollTop = messages.scrollHeight;

  }

  private closeElement() {
    const chat = this.element.querySelector('.chat') as HTMLElement;
    const bt = document.getElementById('floating-chat') as HTMLElement;
    const textInput = this.element.querySelector('.text-box') as HTMLInputElement;

    if (!chat || !textInput) {
      console.error('No se encontraron los elementos necesarios en el DOM');
      return;
    }


    chat.classList.remove('enter');
    chat.style.display = 'none';

    const icon = this.element.querySelector('.floating-chat > i') as HTMLElement;
    

    
    this.element.querySelector('.floating-chat')?.classList.remove('expand');
    
    // Usar las funciones almacenadas para remover los eventos
    this.element.querySelector('.header button')?.removeEventListener('click', this.handleCloseClick);
    this.element.querySelector('#sendMessage')?.removeEventListener('click', this.handleSendMessageClick);
    textInput.removeEventListener('keydown', this.handleKeydown);
    
    textInput.disabled = true;
    textInput.blur();

    setTimeout(() => {
      chat.classList.remove('enter');
      if (icon) {
      icon.classList.remove('hidden');
    }
      bt.classList.remove('expand');  
      bt.classList.remove('enter');
      chat.style.display = '';
      this.element.addEventListener('click', () => this.openElement());
    }, 100);
  }

  private createUUID(): string {
    const hexDigits = "0123456789abcdef";
    const s = Array(36).fill('');
    for (let i = 0; i < 36; i++) {
      s[i] = hexDigits[Math.floor(Math.random() * 16)];
    }
    s[14] = "4"; // bits 12-15 of the time_hi_and_version field to 0010
    s[19] = hexDigits[(parseInt(s[19], 16) & 0x3) | 0x8]; // bits 6-7 of the clock_seq_hi_and_reserved to 01
    s[8] = s[13] = s[18] = s[23] = "-";
    return s.join('');
  }

  private sendNewMessage() {
    const userInput = this.element.querySelector('.text-box') as HTMLInputElement;

    if (!userInput) {
      console.error('No se encontró el campo de entrada de texto');
      return;
    }

    const newMessage = userInput.innerHTML.trim().replace(/\n/g, '<br>');
    if (!newMessage) return;

    const messagesContainer = this.element.querySelector('.messages') as HTMLElement;

    if (!messagesContainer) {
      console.error('No se encontró el contenedor de mensajes');
      return;
    }

    const messageElement = document.createElement('li');
    messageElement.className = 'other';
    messageElement.innerHTML = newMessage;
    messagesContainer.appendChild(messageElement);

    userInput.value = '';
    userInput.focus();

    messagesContainer.scrollTo({ top: messagesContainer.scrollHeight, behavior: 'smooth' });
  }

  private onMetaAndEnter(event: KeyboardEvent) {
    if ((event.metaKey || event.ctrlKey) && event.key === 'Enter') {
      this.sendNewMessage();
    }
  }
}

// Inicialización del componente:
document.addEventListener('DOMContentLoaded', () => {
  new FloatingChat('floating-chat');
});


</script>