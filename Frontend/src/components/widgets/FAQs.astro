---
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import type { Faqs as Props } from '~/types';
import Image from '~/components/common/Image.astro';


const {
  title = '',
  subtitle = '',
  tagline = '',
  image = await Astro.slots.render('image'),
  bgimage = await Astro.slots.render('image'),
  items = [],

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} />
  <div class="grid lg:grid-cols-2 grid-cols-1 gap-20 ">
   <div class="relative order-2 lg:order-1">
    {
      image && (
        <div class="pointer-events-none ">
          {typeof image === 'string' ? (
            <Fragment set:html={image} />
          ) : (
            <Image
              class="w-full mx-auto rounded-md"
              widths={[400, 768, 1024, 2040]}
              sizes="(max-width: 667px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
              loading="eager"
              width={1224}
              height={1076}
              {...image}
            />
          )}
        </div>
      )
    }
    {
      bgimage && (
        <div class="absolute top-0 left-0 m-auto pointer-events-none ">
          {typeof bgimage === 'string' ? (
            <Fragment set:html={bgimage} />
          ) : (
            <Image
              class="w-full mx-auto rounded-md"
              widths={[400, 768, 1024, 2040]}
              sizes="(max-width: 667px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
              loading="eager"
              width={1276}
              height={1226}
              {...bgimage}
            />
          )}
        </div>
      )
    }
   </div>

    <section class="py-3 faq-section flex justify-center lg:justify-start px-6 lg:px-0 order-1 lg:order-2">
      <div class="container">
      <div class="accordion accordion-flush" id="accordionExample">
        {
          items && items.map(item => (
          <div class="container">
            <div class="accordion">
              <div class="accordion-item">
                <button id="accordion-button-1" aria-expanded="false">
                  <span class="accordion-title text-[16px] lg:text-[20px]">{item.title}</span>
                  <span class="icon" aria-hidden="true"></span>
                </button>
                <div class="accordion-content lg:text-[18px] text-[15px]" >
                  <p>
                    {item.description}
                  </p>
                </div>
              </div>
            </div>
          </div>
          ))
        }

      </div>
    </div>
  </section>
  </div>
  
</WidgetWrapper>


<style>

.accordion .accordion-item {
  border-bottom: 1px solid #e5e5e5;
}

.accordion .accordion-item button[aria-expanded='true'] {
  border-bottom: 1px solid #FF7130;
}

.accordion button {
  position: relative;
  display: block;
  text-align: left;
  width: 100%;
  padding: 1em 0;
  color: #171720;
  font-size: 1.15rem;
  font-weight: 400;
  border: none;
  background: none;
  outline: none;
}

.accordion button:hover,
.accordion button:focus {
  cursor: pointer;
  color: #FF7130;
}

.accordion button:hover::after,
.accordion button:focus::after {
  cursor: pointer;
  color: #FF7130;
  border: 1px solid #FF7130;
}

.accordion button .accordion-title {
  padding: 1em 1.5em 1em 0; 
}

.accordion button .icon {
  display: inline-block;
  position: absolute;
  top: 18px;
  right: 0;
  width: 22px;
  height: 22px;
  border: 1px solid;
  border-radius: 22px;
}

.accordion button .icon::before {
  display: block;
  position: absolute;
  content: '';
  top: 9px;
  left: 5px;
  width: 10px;
  height: 2px;
  background: currentColor;
}
.accordion button .icon::after {
  display: block;
  position: absolute;
  content: '';
  top: 5px;
  left: 9px;
  width: 2px;
  height: 10px;
  background: currentColor;
}

.accordion button[aria-expanded='true'] {
  color: #FF7130;
}
.accordion button[aria-expanded='true'] .icon::after {
  width: 0;
}
.accordion button[aria-expanded='true'] + .accordion-content {
  opacity: 1;
  max-height: 9em;
  transition: all 200ms linear;
  will-change: opacity, max-height;
}
.accordion .accordion-content {
  opacity: 0;
  max-height: 0;
  overflow: hidden;
  transition: opacity 200ms linear, max-height 200ms linear;
  will-change: opacity, max-height;
}
.accordion .accordion-content p {
  font-size: .8rem;
  font-weight: 300;
  margin: 1em 0;
}

</style>

<script>
  const items = document.querySelectorAll('.accordion button');

  function toggleAccordion() {
    const itemToggle = this.getAttribute('aria-expanded');

    for (let i = 0; i < items.length; i++) {
      items[i].setAttribute('aria-expanded', 'false');
    }

    if (itemToggle == 'false') {
      this.setAttribute('aria-expanded', 'true');
    }
  }

  items.forEach((item) => item.addEventListener('click', toggleAccordion));

</script>